---
import Layout from '../../layouts/Layout.astro';
import LegalFooter from '../../components/LegalFooter.astro';
import GlossaryContent from '../../components/GlossaryContent.astro';
import CTAFooter from '../../components/CTAFooter.tsx';
import { getCollection } from 'astro:content';
import { ChevronLeft, Calendar, Tag, BookOpen, Clock, BarChart3, TrendingUp, PieChart, Target, Calculator } from 'lucide-react';

export async function getStaticPaths() {
  const glossaryEntries = await getCollection('glossary');
  return glossaryEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry }
  }));
}

const { entry } = Astro.props;
const { Content } = await entry.render();
const allEntries = await getCollection('glossary');

if (!entry) {
  return Astro.redirect('/404');
}

const title = `${entry.data.title} | Glosario Financiero`;
const description = entry.data.summary;

// Calculate reading time (rough estimate: 200 words per minute)
const wordCount = entry.body.split(' ').length;
const readingTime = Math.ceil(wordCount / 200);

// Get icon component
const getIconComponent = (iconName: string) => {
  const iconMap: { [key: string]: any } = {
    'bar-chart': BarChart3,
    'trending-up': TrendingUp,
    'pie-chart': PieChart,
    'book-open': BookOpen,
    'calculator': Calculator,
    'target': Target
  };
  return iconMap[iconName] || BookOpen;
};

// Get related entries with multi-level matching
const getRelatedEntries = (currentEntry: any, allEntries: any[]) => {
  const otherEntries = allEntries.filter(e => e.slug !== currentEntry.slug);
  
  // Level 1: Same category
  const sameCategory = otherEntries.filter(e => 
    e.data.category && currentEntry.data.category && 
    e.data.category === currentEntry.data.category
  );
  
  // Level 2: Common tags
  const commonTags = otherEntries.filter(e => {
    if (!e.data.tags || !currentEntry.data.tags) return false;
    return e.data.tags.some((tag: string) => currentEntry.data.tags.includes(tag));
  });
  
  // Level 3: Same difficulty
  const sameDifficulty = otherEntries.filter(e => 
    e.data.difficulty && currentEntry.data.difficulty && 
    e.data.difficulty === currentEntry.data.difficulty
  );
  
  // Level 4: Recent entries as fallback
  const recentEntries = otherEntries.sort((a, b) => 
    new Date(b.data.date).getTime() - new Date(a.data.date).getTime()
  );
  
  // Combine results with priority, avoiding duplicates
  const seen = new Set();
  const related = [];
  
  // Add same category first
  for (const entry of sameCategory) {
    if (!seen.has(entry.slug) && related.length < 3) {
      related.push(entry);
      seen.add(entry.slug);
    }
  }
  
  // Add common tags if we need more
  for (const entry of commonTags) {
    if (!seen.has(entry.slug) && related.length < 3) {
      related.push(entry);
      seen.add(entry.slug);
    }
  }
  
  // Add same difficulty if we still need more
  for (const entry of sameDifficulty) {
    if (!seen.has(entry.slug) && related.length < 3) {
      related.push(entry);
      seen.add(entry.slug);
    }
  }
  
  // Add recent entries as final fallback
  for (const entry of recentEntries) {
    if (!seen.has(entry.slug) && related.length < 3) {
      related.push(entry);
      seen.add(entry.slug);
    }
  }
  
  return related;
};

const relatedEntries = getRelatedEntries(entry, allEntries);
---

<Layout title={title} description={description}>
  <!-- Reading Progress Bar -->
  <div class="reading-progress"></div>
  
  <main class="min-h-screen bg-white">
    <!-- Header -->
    <div class="bg-gradient-to-br from-gray-50 to-blue-50 border-b border-gray-200">
      <div class="container mx-auto px-4 py-8">
        <div class="max-w-4xl mx-auto">
          <!-- Breadcrumb -->
          <nav class="flex items-center mb-6 text-sm">
            <a href="/" class="text-gray-500 hover:text-gray-700 inline-flex items-center gap-1">
              <BookOpen className="h-4 w-4" />
              Inicio
            </a>
            <span class="mx-2 text-gray-400">/</span>
            <a href="/glosario" class="text-gray-500 hover:text-gray-700">
              Glosario
            </a>
            <span class="mx-2 text-gray-400">/</span>
            <span class="text-gray-800 font-medium truncate">{entry.data.title}</span>
          </nav>

          <!-- Entry Header -->
          <div class="flex items-start gap-4 mb-6">
            <div class="w-12 h-12 bg-blue-100 rounded-xl flex items-center justify-center flex-shrink-0">
              {(() => {
                const IconComponent = getIconComponent(entry.data.icon);
                return <IconComponent className="h-6 w-6 text-blue-600" />;
              })()}
            </div>
            <div class="flex-1">
              <h1 class="text-3xl md:text-4xl font-bold text-gray-900 mb-3">
                {entry.data.title}
              </h1>
              <p class="text-lg text-gray-600 mb-4 leading-relaxed">
                {entry.data.summary}
              </p>
              
              <!-- Meta Information -->
              <div class="flex flex-wrap items-center gap-4 text-sm text-gray-500">
                <div class="flex items-center gap-1">
                  <Calendar className="h-4 w-4" />
                  {new Date(entry.data.date).toLocaleDateString('es-ES', { 
                    year: 'numeric', 
                    month: 'long', 
                    day: 'numeric' 
                  })}
                </div>
                
                <div class="flex items-center gap-1">
                  <Clock className="h-4 w-4" />
                  {readingTime} min de lectura
                </div>
                
                {entry.data.category && (
                  <div class="flex items-center gap-1">
                    <Tag className="h-4 w-4" />
                    <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                      {entry.data.category}
                    </span>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Content -->
    <div class="container mx-auto px-4 py-12">
      <div class="max-w-4xl mx-auto">
        <article class="bg-white">
          <!-- Content Body -->
          <GlossaryContent>
            <Content />
          </GlossaryContent>

          <!-- CTA Footer -->
          <CTAFooter client:load />

          <!-- Navigation -->
              <div class="navigation-section mt-12 pt-8 border-t border-gray-200">
                <div class="flex flex-col sm:flex-row gap-4 justify-between">
                  <a 
                    href="/glosario" 
                    class="inline-flex items-center gap-2 text-blue-600 hover:text-blue-800 font-medium"
                  >
                    <ChevronLeft className="h-5 w-5" />
                    Volver al glosario
                  </a>
                  
                  <div class="flex gap-4">
                    <!-- Previous/Next entries could go here -->
                    <a 
                      href="/cartera" 
                      class="inline-flex items-center gap-2 px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors"
                    >
                      Ver carteras
                    </a>
                  </div>
                </div>

          <!-- Related Concepts -->
          {relatedEntries.length > 0 && (
            <div class="mt-16 pt-8 border-t border-gray-200">
              <h3 class="text-xl font-semibold text-gray-900 mb-6">Conceptos relacionados</h3>
              <div class="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                {relatedEntries.map(relatedEntry => (
                  <a 
                    href={`/glosario/${relatedEntry.slug}`}
                    class="block p-4 border border-gray-200 rounded-lg hover:shadow-md transition-all duration-300 hover:border-blue-200"
                  >
                    <div class="flex items-center gap-3 mb-2">
                      <div class="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center">
                        {(() => {
                          const IconComponent = getIconComponent(relatedEntry.data.icon);
                          return <IconComponent className="h-4 w-4 text-blue-600" />;
                        })()}
                      </div>
                      <h4 class="font-medium text-gray-900">{relatedEntry.data.title}</h4>
                    </div>
                    <p class="text-sm text-gray-600 line-clamp-2">
                      {relatedEntry.data.summary}
                    </p>
                  </a>
                ))}
              </div>
            </div>
          )}
        </article>
        </div>

        <LegalFooter />
      </div>
    </div>
  </main>

    <script>
    // Reading progress indicator
    function updateReadingProgress() {
      const article = document.querySelector('article');
      const progressBar = document.querySelector('.reading-progress');
      
      if (!article || !progressBar) return;
      
      const articleTop = article.offsetTop;
      const articleHeight = article.offsetHeight;
      const windowHeight = window.innerHeight;
      const scrollTop = window.scrollY;
      
      const articleBottom = articleTop + articleHeight - windowHeight;
      const progress = Math.min(Math.max((scrollTop - articleTop) / (articleBottom - articleTop), 0), 1);
      
      (progressBar as HTMLElement).style.width = `${progress * 100}%`;
    }

    // Initialize when DOM is loaded
    document.addEventListener('DOMContentLoaded', () => {
      // Add scroll listener for reading progress
      window.addEventListener('scroll', updateReadingProgress);
      updateReadingProgress(); // Initial call
    });
  </script>

  <style>
    .line-clamp-2 {
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }
    
    /* Progress indicator */
    .reading-progress {
      position: fixed;
      top: 0;
      left: 0;
      width: 0%;
      height: 3px;
      background: linear-gradient(90deg, #3b82f6, #1d4ed8);
      z-index: 1000;
      transition: width 0.1s ease;
    }
    
    /* Smooth scroll behavior */
    html {
      scroll-behavior: smooth;
    }
  </style>
</Layout> 